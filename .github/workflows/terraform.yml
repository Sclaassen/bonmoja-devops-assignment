name: Terraform CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:  # Allow manual runs

env:
  AWS_BUCKET_NAME: ${{ secrets.TF_STATE_BUCKET_NAME }}
  AWS_BUCKET_KEY_NAME: ${{ secrets.TF_STATE_BUCKET_KEY }}

jobs:
  terraform:
    runs-on: ubuntu-latest
    environment: demo
    defaults:
      run:
        working-directory: ./
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      TF_LOG: INFO
      TF_VAR_aws_region: ${{ vars.AWS_REGION }}
      TF_VAR_environment: ${{ vars.ENVIRONMENT }}
      TF_VAR_db_password: ${{ secrets.DB_PASSWORD }}
      TF_VAR_db_name: ${{ secrets.DB_NAME }}
      TF_VAR_db_username: ${{ secrets.DB_USER }}
      TF_VAR_sns_subscription_email: ${{ vars.SNS_SUBSCRIPTION_EMAIL }}
      TF_VAR_subnet_availability_zones: ${{ vars.SUBNET_AVAILABILITY_ZONES }}
      TF_VAR_vpc_cidr: ${{ vars.VPC_CIDR }}
      TF_VAR_public_subnet_cidrs: ${{ vars.PUBLIC_SUBNET_CIDRS }}
      TF_VAR_private_subnet_cidrs: ${{ vars.PRIVATE_SUBNET_CIDRS }}
      TF_VAR_rds_instance_class: ${{ vars.RDS_INSTANCE_CLASS }}
      TF_VAR_rds_allocated_storage: ${{ vars.RDS_ALLOCATED_STORAGE }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.7.5

      - name: Terraform Format Check
        run: terraform fmt -recursive

      - name: Terraform Init
        run: |
          terraform init \
            -backend-config="bucket=${{ secrets.TF_STATE_BUCKET_NAME }}" \
            -backend-config="key=${{ secrets.TF_STATE_BUCKET_KEY }}" \
            -backend-config="region=${{ vars.AWS_REGION }}" \
            -backend-config="encrypt=true" \
            -backend-config="dynamodb_table=${{ secrets.TF_STATE_DYNAMODB_TABLE }}" \
            -input=false

      - name: Terraform Validate
        run: terraform validate

      - name: Terraform Plan
        id: tf_plan
        run: |
          terraform plan -no-color -input=false -out=tfplan > plan.txt
        continue-on-error: true

      - name: Fail on Plan Error
        if: steps.tf_plan.outcome == 'failure'
        run: |
          echo "Terraform plan failed. See plan.txt for details."
          cat plan.txt
          exit 1

      - name: Check for Existing Resource Errors
        if: steps.tf_plan.outcome == 'failure'
        run: |
          if grep -q 'already exists' plan.txt; then
            echo "::error :: Resource drift detected! Resources already exist in AWS but not tracked in state."
            echo "You must import these resources into state before running apply."
            exit 1
          fi

      - name: Terraform Apply
        if: steps.tf_plan.outcome == 'success'
        run: terraform apply -auto-approve -input=false tfplan

      - name: Get service endpoint from Terraform output
        if: steps.tf_plan.outcome == 'success'
        id: get_endpoint
        run: |
          endpoint=$(terraform output -raw alb_dns_name)
          echo "SERVICE_ENDPOINT=$endpoint" >> $GITHUB_ENV

      - name: Run health check
        if: steps.tf_plan.outcome == 'success'
        run: |
          pip install requests
          python scripts/health_check.py -url $SERVICE_ENDPOINT
